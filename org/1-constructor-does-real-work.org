#+TITLE: Flaw: Constructor does Real Work
#+AUTHOR: Mi≈°ko Hevery, Jonathan Wolter, Russ Ruffer
#+HTML_HEAD: <link rel="stylesheet" href="style.css" type="text/css">
#+OPTIONS: num:nil html-style:nil

Work in the constructor such as: creating/initializing collaborators,
communicating with other services, and logic to set up its own state
/removes seams needed for testing/, forcing subclasses/mocks to inherit
unwanted behavior. Too much work in the constructor prevents
instantiation or altering collaborators in the test.

| Warning Signs:                                                                                            |
|-----------------------------------------------------------------------------------------------------------|
| - =new= keyword in a constructor or at field declaration                                                  |
| - Static method calls in a constructor or at field declaration                                            |
| - Anything more than field assignment in constructors                                                     |
| - Object not fully initialized after the constructor finishes (watch out for initialize methods)          |
| - Control flow (conditional or looping logic) in a constructor                                            |
| - CL does complex object graph construction inside a constructor rather than using a factory or builder   |
| - Adding or using an initialization block                                                                 |

* Why this is a Flaw
When your constructor has to instantiate and initialize its
collaborators, the result tends to be an inflexible and prematurely
coupled design. Such constructors shut off the ability to inject test
collaborators when testing.

** It violates the Single Responsibility Principle

When collaborator construction is mixed with initialization, it suggests
that there is only one way to configure the class, which closes off
reuse opportunities that might otherwise be available. Object graph
creation is a full fledged responsibility --- a different one from why a
class exists in the first place. Doing such work in a constructor
violates the Single Responsibility Principle.

** Testing Directly is Difficult

Testing such constructors is difficult. To instantiate an object, the
constructor must execute. And if that constructor does lots of work, you
are forced to do that work when creating the object in tests. If
collaborators access external resources (e.g. files, network services,
or databases), subtle changes in collaborators may need to be reflected
in the constructor, but may be missed due to missing test coverage from
tests that weren't written because the constructor is so difficult to
test. We end up in a vicious cycle.

** Subclassing and Overriding to Test is Still Flawed

Other times a constructor does little work itself, but delegates to a
method that is expected to be overridden in a test subclass. This may
work around the problem of difficult construction, but using the
"subclass to test" trick is something you only should do as a last
resort. Additionally, by subclassing, you will fail to test the method
that you override. And that method does lots of work (remember -- that's
why it was created in the first place), so it probably should be tested.

** It Forces Collaborators on You

Sometimes when you test an object, you don't want to actually create all
of its collaborators. For instance, you don't want a real
=MySqlRepository= object that talks to the MySql service. However, if they
are directly created using =new MySqlRepositoryServiceThatTalksToOtherServers()= inside your System Under
Test (SUT), then you will be forced to use that heavyweight object.

** It Erases a "Seam"

Seams are places you can slice your codebase to remove dependencies and
instantiate small, focused objects. When you do =new XYZ()= in a constructor,
you'll never be able to get a different (subclass) object created. (See Michael
Feathers book [[http://www.amazon.com/Working-Effectively-Legacy-Robert-Martin/dp/0131177052][Working Effectively with Legacy Code]] for more about seams).

** It Still is a Flaw even if you have Multiple Constructors (Some for "Test Only")

Creating a separate "test only" constructor does not solve the problem.
The constructors that do work will still be used by other classes. Even
if you can test this object in isolation (creating it with the test
specific constructor), you're going to run into other classes that use
the hard-to-test constructor. And when testing those other classes, your
hands will be tied.

** Bottom Line

It all comes down to how hard or easy it is to construct the class in
isolation or with test-double collaborators.

- If it's hard, you're doing too much work in the constructor!
- If it's easy, pat yourself on the back.

Always think about how hard it will be to test the object while you are
writing it. Will it be easy to instantiate it via the constructor you're
writing? (Keep in mind that your test-class will not be the only code
where this class will be instantiated.)

So many designs are full of "objects that instantiate other objects or
retrieve objects from globally accessible locations. These programming
practices, when left unchecked, lead to highly coupled designs that are
difficult to test." [J.B. Rainsberger, [[http://www.manning.com/rainsberger/][JUnit Recipes]], Recipe 2.11]

* Recognizing the Flaw

Examine for these symptoms:

- The =new= keyword constructs anything you would like to replace with a
  test-double in a test? (Typically this is anything bigger than a
  simple value object).
- Any static method calls? (Remember: static calls are non-mockable, and
  non-injectable, so if you see =Server.init()= or anything of that ilk,
  warning sirens should go off in your head!)
- Any conditional or loop logic? (You will have to successfully navigate
  the logic every time you instantiate the object. This will result in
  excessive setup code not only when you test the class directly, but
  also if you happen to need this class while testing any of the related
  classes.)

Think about one fundamental question when writing or reviewing code: How am I
going to test this?

#+BEGIN_QUOTE
If the answer is not obvious, or it looks like the test would be ugly or hard to
write, then take that as a warning signal. Your design probably needs to be
modified; change things around until the code is easy to test, and your design
will end up being far better for the effort."

[Hunt, Thomas. [[http://oreilly.com/catalog/9780974514017/][Pragmatic Unit Testing in Java with JUnit]], p 103]
#+END_QUOTE

*Note*: Constructing *value objects* may be acceptable in many cases
(examples: =LinkedList=, =HashMap=, =User=, =EmailAddress=, =CreditCard=). Value
object's key attributes are:
- trivial to construct;
- state focused (lots of getters and setters, low on behavior);
- do not refer to any service object.

* Fixing the Flaw
:PROPERTIES:
:CUSTOM_ID: fixing-the-flaw
:END:

/Do not create collaborators in your constructor, but pass them in/.

Move the responsibility for object graph construction and initialization
into another object. (e.g. extract a builder, factory or Provider, and
pass these collaborators to your constructor).

Example: If you depend on a =DatabaseService= (hopefully that's an
interface), then use Dependency Injection (DI) to pass in to the
constructor the exact subclass of =DatabaseService= object you need.

/To repeat/: /*Do not create collaborators in your constructor*/, but
pass them in. (Don't look for things! Ask for things!)

If there is initialization that needs to happen with the objects that
get passed in, you have three options:

1. Best Approach: use Dependency Injection framework to create and initialize
   YourObject constructor arguments. This will remove the need to initialize the
   objects on-the-go.  Sometimes you will use Builders or Factories in addition
   to Providers, then pass in the builders and factories to the constructor.
2. Best Approach using manual Dependency Injection: Use a Builder, or a Factory,
   for YourObject constructor arguments. Typically there is one factory for a
   whole graph of objects, see example below. (So you don't have to worry about
   having class explosion due to one factory for every class) The responsibility
   of the factory is to create the object graph and to do no work. (All you
   should see in the factory is a whole lot of new keywords and passing around
   of references). The responsibility of the object graph is to do work, and to
   do no object instantiation (There should be a serious lack of new keywords in
   application logic classes).
3. Only as a Last Resort: Have an init(...) method in your class that
   can be called after construction. Avoid this wherever you can,
   preferring the use of another object who's single responsibility is
   to configure the parameters for this object.

* Concrete Code Examples Before and After
:PROPERTIES:
:CUSTOM_ID: concrete-code-examples-before-and-after
:END:

Fundamentally, "Work in the Constructor" amounts to doing anything that
makes /instantiating your object difficult/ or /introducing test-double
objects difficult/.

** Problem: "new" Keyword in the Constructor or at Field Declaration
:PROPERTIES:
:CUSTOM_ID: problem-new-keyword-in-the-constructor-or-at-field-declaration
:END:

#+caption: Before: Hard to Test
#+begin_src typescript
// Basic new operators called directly in the class' constructor. (Forever
// preventing a seam to create different kitchen and bedroom collaborators).
class House {
  private kitchens: Kitchen[] = [new Kitchen()];
  private bedrooms: Bedroom[];
  constructor() {
    this.bedrooms = [new Bedroom()];
  }

  getNumberOfBedrooms() {
    return this.bedrooms.length;
  }
}

// It not possible to have the house you want!
it('should have 2 bedrooms', () => {
  const house = new House();
  expect(house.getNumberOfBedrooms()).toBe(2);
})
#+end_src

This example mixes object graph creation with logic. In tests we often
want to create a different object graph than in production. Usually it
is a smaller graph with some objects replaced with test-doubles. By
leaving the new operators inline we will never be able to create a graph
of objects for testing. See: "[[http://misko.hevery.com/2008/07/08/how-to-think-about-the-new-operator/][How to think about the new operator]]"

- Flaw: inline object instantiation where fields are declared has the
  same problems that work in the constructor has.
- Flaw: this may be easy to instantiate but if =Kitchen= represents
  something expensive such as file/database access it is not very
  testable since we could never replace the =Kitchen= or =Bedroom= with a
  test-double.
- Flaw: Your design is more brittle, because you can never
  polymorphically replace the behavior of the =Kitchen= or =Bedroom= in the
  =House=.

#+caption: After: Testable and Flexible Design
#+begin_src typescript
class House {
  constructor(private kitchens: Kitchen[], private bedrooms: Bedroom[]) {}

  getNumberOfBedrooms() {
    return this.bedrooms.length;
  }
}

// Two bedrooms, excatly as we wanted
it('should have 2 bedrooms', () => {
  const house = new House([], [new Bedroom(), new Bedroom()]);
  expect(house.getNumberOfBedrooms()).toBe(2);
})
#+end_src

If the =Kitchen= is a value object such as: =LinkedList=, =Map=, =User=, =EmailAddress=,
etc., then we can create them inline as long as the value objects do not
reference service objects. Service objects are the type most likely that need to
be replaced with test-doubles, so you never want to lock them in with direct
instantiation or instantiation via static method calls.

** Problem: Constructor takes a partially initialized object and has to set it up
:PROPERTIES:
:CUSTOM_ID: problem-constructor-takes-a-partially-initialized-object-and-has-to-set-it-up
:END:

#+caption: Before: Hard to Test
#+begin_src typescript
// SUT initializes collaborators. This prevents
//   tests and users of Garden from altering them.
class Garden {
  constructor(private joe: Gardener) {
    this.joe.setWorkday(new TwelveHourWorkday());
    this.joe.setBoots(new BootsWithMassiveStaticInitBlock());
  }
}

it('should work in infected garden', () => {
  Gardener joe = new Gardener();
  Garden garden = new Garden(joe);
  new AphidPlague(garden).infect();
  garden.notifyGardenerSickShrubbery();
  expect(joe.isWorking()).toBe(true);
});
#+end_src

Object graph creation (creating and configuring the =Gardener=
collaborator for =Garden=) is a different responsibility than what the
=Garden= should do. When configuration and instantiation is mixed together
in the constructor, objects become more brittle and tied to concrete
object graph structures. This makes code harder to modify, and (more or
less) impossible to test.

- Flaw: The =Garden= needs a =Gardener=, but it should not be the
  responsibility of the =Garden= to configure the =Gardener=.
- Flaw: In a unit test for =Garden= the workday is set specifically in the
  constructor, thus forcing us to have Joe work a 12 hour workday.
  Forced dependencies like this can cause tests to run slow. In unit
  tests, you'll want to pass in a shorter workday.
- Flaw: You can't change the boots. You will likely want to use a
  test-double for boots to avoid the problems with loading and using
  =BootsWithMassiveStaticInitBlock=. (Static initialization blocks are
  often dangerous and troublesome, especially if they interact with
  global state.)

#+caption: After: Testable and Flexible Design
#+begin_src typescript
class Garden {
  constructor(private joe: Gardener) {}
}

it('should work in infected garden', () => {
  Gardener gardener = new Gardener();
  gardener.setWorkday(new OneMinuteWorkday());
  // Okay to pass in null, b/c not relevant in this test.
  gardener.setBoots(null);
  Garden garden = new Garden(gardener);
  new AphidPlague(garden).infect();
  garden.notifyGardenerSickShrubbery();
  expect(gardener.isWorking()).toBe(true);
});
#+end_src

Have two objects when you need to have collaborators initialized.
Initialize them, and then pass them fully initialized into the
constructor of the class of interest.

** Problem: Violating the Law of Demeter in Constructor
:PROPERTIES:
:CUSTOM_ID: problem-violating-the-law-of-demeter-in-constructor
:END:

#+caption: Before: Hard to Test
#+begin_src typescript
// Violates the Law of Demeter
// Brittle because of excessive dependencies
// Mixes object lookup with assignment
class AccountView {
  private user: User;
  constructor() {
    this.user = RPCClient.getInstance().getUser();
  }
}
// Hard to test because needs real RPCClient
it('should do something with account view', () => {
  AccountView view = new AccountView();
  // Shucks! We just had to connect to a real
  //   RPCClient. This test is now slow.
  // ...
});
#+end_src

In this example we reach into the global state of an application and get
a hold of the RPCClient singleton. It turns out we don't need the
singleton, we only want the User. First: we are doing work (against
static methods, which have zero seams). Second: this violates the "Law
of Demeter".

- Flaw: We cannot easily intercept the call RPCClient.getInstance() to
  return a mock RPCClient for testing. (Static methods are
  non-interceptable, and non-mockable).
- Flaw: Why do we have to mock out RPCClient for testing if the class
  under test does not need RPCClient?(AccountView doesn't persist the
  rpc instance in a field.) We only need to persist the User.
- Flaw: Every test which needs to construct class AccountView will have
  to deal with the above points. Even if we solve the issues for one
  test, we don't want to solve them again in other tests. For example
  AccountServlet may need AccountView. Hence in AccountServlet we will
  have to successfully navigate the constructor.

#+caption: After: Testable and Flexible Design
#+begin_src typescript
class AccountView {
  constructor(private user: User) {}
}

it('should do something with account view', () => {
  let user = new DummyUser();
  let view = new AccountView(user);
  // Easy to test and fast with test-double
  //   user.
  // ...
});
#+end_src

In the improved code only what is directly needed is passed in: the User
collaborator. For tests, all you need to create is a (real or
test-double) User object. This makes for a more flexible design /and/
enables better testability.

** Problem: Creating Unneeded Third Party Objects in Constructor.
:PROPERTIES:
:CUSTOM_ID: problem-creating-unneeded-third-party-objects-in-constructor.
:END:

#+caption: Before: Hard to Test
#+begin_src typescript
// Creating unneeded third party objects,
//   Mixing object construction with logic, &
//   "new" keyword removes a seam for other
//   EngineFactory's to be used in tests.
//   Also ties you to the (slow) file system.
class Car {
  private engine?: Engine;
  constructor(File file) {
    let model = readEngineModel(file);
    this.engine = new EngineFactory().create(model);
  }
}

it('should have an engine', () => {
  // Aggh! I hate using files in unit tests
  let file = new File('engine.config');
  let car = new Car(file);
  // I want to test with a fake engine
  //   but I can't since the EngineFactory
  //   only knows how to make real engines.
});
#+end_src

Linguistically, it does not make sense to require a Car to get an
EngineFactory in order to create its own engine. Cars should be given
readymade engines, not figure out how to create them. The car you ride
in to work shouldn't have a reference back to its factory. In the same
way, some constructors reach out to third party objects that aren't
directly needed --- only something the third party object can create is
needed.

- Flaw: Passing in a file, when all that is ultimately needed is an
  Engine.
- Flaw: Creating a third party object (EngineFactory) and paying any
  assorted costs in this non-injectable and non-overridable creation.
  This makes your code more brittle because you can't change the
  factory, you can't decide to start caching them, and you can't prevent
  it from running when a new Car is created.
- Flaw: It's silly for the car to know how to build an EngineFactory,
  which then knows how to build an engine. (Somehow when these objects
  are more abstract we tend to not realize we're making this mistake).
- Flaw: Every test which needs to construct class Car will have to deal
  with the above points. Even if we solve the issues for one test, we
  don't want to solve them again in other tests. For example another
  test for a Garage may need a Car. Hence in Garage test I will have to
  successfully navigate the Car constructor. And I will be forced to
  create a new EngineFactory.
- Flaw: Every test will need a access a file when the Car constructor is
  called. This is slow, and prevents test from being true unit tests.

Remove these third party objects, and replace the work in the constructor with
simple variable assignment. Assign pre-configured variables into fields in the
constructor. Have another object (a factory, builder) do the actual construction
of the constructor's parameters. Split off of your primary objects the
responsibility of object graph construction and you will have a more flexible
and maintainable design.

#+caption: After: Testable and Flexible Design
#+begin_src typescript
// Asks for precisely what it needs
class Car {
  constructor(private engine: Engine) {
  }
}

it('should have an engine', () => {
  let fakeEngine = new FakeEngine();
  let car = new Car(fakeEngine);
  // Now testing is easy, with the car taking
  //   exactly what it needs.
});
#+end_src

** Problem: Directly Reading Flag Values in Constructor
:PROPERTIES:
:CUSTOM_ID: problem-directly-reading-flag-values-in-constructor
:END:

#+caption: Before: Hard to Test
#+begin_src typescript
// Reading flag values to create collaborators
class PingServer {
  private socket?: Socket;
  constructor() {
    socket = new Socket(FLAG_PORT.get());
  }
}

// The test is brittle and tied directly to a
//   Flag's static method (global state).
it('should run on some port', () => {
  let server = new PingServer();
  // This looks innocent enough, but really
  //   it forces you to mutate global state
  //   (the flag) to run on another port.
});
#+end_src

What looks like a simple no argument constructor actually has a lot of
dependencies. Once again the API is lying to you, pretending it is easy
to create, but actually PingServer is brittle and tied to global state.

- Flaw: In your test you will have to rely on global variable =FLAG_PORT=
  in order to instantiate the class. This will make your tests flaky as
  the order of tests matters.
- Flaw: Depending on a statically accessed flag value prevents you from
  running tests in parallel. Because parallel running test could change
  the flag value at the same time, causing failures.
- Flaw: If the socket needed additional configuration (i.e. calling
  =setSoTimeout()=), that can't happen because the object construction
  happens in the wrong place. =Socket= is created inside the =PingServer=,
  which is backwards. It needs to happen externally, in something whose
  sole responsibility is object graph construction.

#+caption: After: Testable and Flexible Design
#+begin_src typescript
// Best solution (although you also could pass
//   in an int of the Socket's port to use)
class PingServer {
  constructor(private socket: Socket) {}
}

// The revised code is flexible, and easily
//   tested (without any global state).
it('should run on given port', () => {
  let customPort = 1234;
  let socket = new Socket(customPort);
  let server = new PingServer(socket);
});
#+end_src

=PingServer= ultimately needs a socket not a port number. By passing in
the port number we will have to tests with real sockets/threads. By
passing in a socket we can create a mock socket in tests and test the
class without any real sockets / threads. Explicitly passing in the port
number removes the dependency on global state and greatly simplifies
testing. Even better is passing in the socket that is ultimately needed.

** Problem: Directly Reading Flags and Creating Objects in Constructor
:PROPERTIES:
:CUSTOM_ID: problem-directly-reading-flags-and-creating-objects-in-constructor
:END:

#+caption: Before: Hard to Test
#+begin_src typescript
// Branching on flag values to determine state.
class CurlingTeamMember {
  private jersey?: Jersey;
  constructor() {
    if (FLAG_isSuedeJersey.get()) {
      jersey = new SuedeJersey();
    } else {
      jersey = new NylonJersey();
    }
  }
}
// Testing the CurlingTeamMember is difficult.
//   In fact you can't use any Jersey other
//   than the SuedeJersey or NylonJersey.
it('should ...', () => {
  //  You are forced to use global state.
  // ... Set the flag how you want it
  CurlingTeamMember russ = new CurlingTeamMember();
  // Tests are locked in to using one of the two jerseys above.
});
#+end_src

- Flaw: Directly reading flags is reaching out into global state to get
  a value. This is undesirable because global state is not isolated:
  previous tests could set it to a different value, or other threads
  could mutate it unexpectedly.
- Flaw: Directly constructing the differing types of =Jersey=, depending
  on a flag's value. Your tests that instantiate a =CurlingTeamMember=
  have no seam to inject a different =Jersey= collaborator for testing.
- Flaw: The responsibility of the =CurlingTeamMember= is broad: both
  whatever the core purpose of the class, and now also =Jersey=
  configuration. Passing in a preconfigured Jersey object instead is
  preferred. Another object can have the responsibility of configuring
  the =Jersey=.

#+caption: After: Testable and Flexible Design
#+begin_src typescript
// We moved the responsibility of the selection
//   of Jerseys into a provider.
class CurlingTeamMember {
  constructor(private jersey: Jersey) {
    this.jersey = jersey;
  }
}

it('...', () => {
  let jersey = new LightweightJersey();
  let russ = new CurlingTeamMember(jersey);
  // No need to touch the flag
  // Tests are free to use any jersey.
});
#+end_src

** Problem: Moving the Constructor's "work" into an Initialize Method
:PROPERTIES:
:CUSTOM_ID: problem-moving-the-constructors-work-into-an-initialize-method
:END:

#+caption: Before: Hard to Test
#+begin_src typescript
// With statics, singletons, and a tricky
//   initialize method this class is brittle.
class VisualVoicemail {
  private user: User;
  private calls: Call[];

  constructor(User user) {
    // Look at me, aren't you proud? I've got an easy constructor.
    this.user = user;
    this.calls = [];
  }

  initialize() {
    Server.readConfigFromFile();
    let server = Server.getSingleton();
    this.calls = server.getCallsFor(this.user);
  }

  // This was tricky, but I think I figured
  // out how to make this testable!
  setCalls(calls: Call[]) {
    this.calls = calls;
  }

  // ...
}

// Brittle code exposed through the test
it('exposes brittle design', () => {
  let dummyUser = new DummyUser();
  let voicemail = new VisualVoicemail(dummyUser);
  voicemail.setCalls(buildListOfTestCalls());

  // Technically this can be tested, as long
  //   as you don't need the Server to have
  //   read the config file. But testing
  //   without testing the initialize()
  //   excludes important behavior.

  // Also, the code is brittle and hard to
  //   later on add new functionalities.
});
#+end_src

Moving the "work" into an initialize method is not the solution. You
need to decouple your objects into single responsibilities. (Where one
single responsibility is to provide a fully-configured object graph).

- Flaw: At first glance it may look like DI is used effectively. For
  testing the =VisualVoicemail= object is very easy to construct. However
  the code is still brittle and tied to several static initialization
  calls.
- Flaw: The initialize method is a glaring sign that this object has too
  many responsibilities: whatever a =VisualVoicemail= needs to do, and
  initializing its dependencies. Dependency initialization should happen
  in another class, passing /all/ of the ready-to-be-used objects into
  the constructor.
- Flaw: The =Server.readConfigFromFile()= method is non interceptable when
  in a test, if you want to call the initialize method.
- Flaw: The =Server= is non-initializable in a test. If you want to use
  it, you're forced to get it from the global singleton state. If two
  tests run in parallel, or a previous test initializes the Server
  differently, global state will bite you.

#+caption: After: Testable and Flexible Design
#+begin_src typescript
// Using DI and Guice, this is a
//   superior design.
class VisualVoicemail {
  constructor(private calls: Call[]) {
  }
}

// Dependency Injection exposes your
//   dependencies and allows for seams to
//   inject different collaborators.
it('just works', () => {
  let voicemail = new VisualVoicemail(buildListOfTestCalls());
});
#+end_src

All work is pushed to other parts of code.

** Problem: Having Multiple Constructors, where one is Just for Testing
:PROPERTIES:
:CUSTOM_ID: problem-having-multiple-constructors-where-one-is-just-for-testing
:END:

#+caption: Before: Hard to Test
#+begin_src typescript
// Half way easy to construct. The other half
//   expensive to construct. And for collaborators
//   that use the expensive constructor - they
//   become expensive as well.
class VideoPlaylistIndex {
  private repo: VideoRepository;

  constructor(repo?: VideoRepository) {
    // Look at me, aren't you proud?
    // An easy constructor for testing!
    this.repo = repo || new FullLibraryIndex();
  }
}

// And a collaborator, that is expensive to build
//   because the hard coded index construction.
class PlaylistGenerator {
  private index: VideoPlaylistIndex = new VideoPlaylistIndex();

  buildPlaylist(q: Query): Playlist {
    return this.index.search(q);
  }
}

// Testing the VideoPlaylistIndex is easy,
//  but testing the PlaylistGenerator is not!
it('has Bad design - no seams', () => {
  let generator = new PlaylistGenerator();
});
#+end_src

Optionally initialized constructor arguments, that are passed only in testing,
is a hint that parts of your code will still be hard to test. =VideoPlaylistIndex=
is easy to test (you can pass in a test-double =VideoRepository=). However,
whichever dependant objects which use the no-arg constructor will be hard to
test.

- Flaw: =PlaylistGenerator= is hard to test, because it takes advantage of
  the no-arg constructor for =VideoPlaylistIndex=, which is hard coded to
  using the =FullLibraryIndex=.You wouldn't really want to test the
  =FullLibraryIndex= in a test of the =PlaylistGenerator=, but you are
  forced to.
- Flaw: Usually, the code written to be used in tests only is a sign that class
  was not written to be easily tested. And even though it will let you set the
  repository object, it is only a /hack/ to get around the root problem.

#+caption: After: Testable and Flexible Design
#+begin_src typescript
// Easy to construct, and no other objects are
//   harmed by using an expensive constructor.
class VideoPlaylistIndex {
  constructor(private repo: VideoRepository) {
  }
}

class PlaylistGenerator {
  VideoPlaylistIndex index;

  constructor(private index: VideoPlaylistIndex) {
  }

  buildPlaylist(q: Query): Playlist {
    return this.index.search(q);
  }
}
// Easy to test when Dependency Injection
//   is used everywhere.
it('has flexible design', () => {
  let fakeIndex = new InMemoryVideoPlaylistIndex()
  let generator = new PlaylistGenerator(fakeIndex);
  // Success! The generator does not care
  //   about the index used during testing
  //   so a fakeIndex is passed in.
});
#+end_src

Ideally the =PlaylistGenerator= asks for the =VideoPlaylistIndex= in its
constructor instead of creating its dependency directly.
